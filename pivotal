#!/usr/bin/env ruby

# TODO
# * Add checking to the git methods
# * Use opt-parse
# * Write documentation
# * Get settings from Pivotal API instead of hard coding
# * Allow many more config options to make this more flexible
# * Refactor the shit outta the code

# BUGS
# * pivotal info next will get the next ESTIMATED story

require 'pivotal-tracker'
require 'yaml'

TEMP_DIR = "#{ENV['HOME']}/.pivotal/" 
TEMP_FILE = TEMP_DIR + "temp.yml"
CONFIG_FILE = TEMP_DIR + "config.yml"

class Git
  def self.current_branch
    `git branch | grep "*" | sed "s/* //"`.chomp
  end

  def self.status
    `git status -s`
  end

  def self.stash
    `git stash`
  end

  def self.drop_stash
    `git stash drop`
  end

  def self.discard_current_changes
    self.stash
    self.drop_stash
  end

  def self.checkout branch
    `git checkout #{branch}`
  end

  def self.pull
    `git pull`
  end

  def self.branch_name story
    "feature/#{story.id}_#{story.name.downcase.gsub(' ', '_').gsub(/[^0-9A-Za-z_]/, '')}"
  end

  def self.push branch
    `git push origin #{branch}`
  end
end

class Output
  def self.error string
    puts "\033[33m" + string + "\033[0m\n"
  end

  def self.message string
    puts "\033[32m" + string + "\033[0m\n"
  end

  def self.story_info story
    puts story.name
    puts "id:\t\t#{story.id}"
    puts "notes:\t\t#{story.description}"
    puts "status:\t\t#{story.current_state}"
    puts "estimate:\t#{(story.estimate == -1) ? 'unestimated' : story.estimate}"
  end
end

class YAMLFile
  def initialize file
    @file = file
  end

  def load file
    YAML::load(File.read(@file)) || {}
  end

  def [] key
    get key
  end

  def []= key, value
    set key, value
  end

  def get key
    contents = load @file
    contents[key.to_sym]
  end

  def has_key? key
    contents = load @file
    contents.has_key? key.to_sym
  end

  def put key, value
    contents = load @file
    config[key.to_sym] = value
    open(@file, 'w') { |f| YAML::dump(contents, f)}
  end
end

class User
  def initialize config
    @email = nil
    @password = nil
    @token = nil
    @errors = []
    if config.has_key? :email
      @email = config.get(:email)
    else
      @errors.add("Email is not set! Use pivotal set to set the email")
    end
    if config.has_key? :password
      @password = config.get(:password)
    else
      @errors.add("Password is not set! Use pivotal set to set the password")
    end
    
    if @errors.empty?
      @token = PivotalTracker::Client.token(config[:email], config[:password])
    end
  end

  def errors
    @errors
  end

  def valid?
    !@token.nil?
  end

  def started_story?
    info = new YAMLFile(TEMP_FILE)
    info.get(id) != -1
  end

  def get_projects
    PivotalTracker::Project.all
  end
end

def set_up_environment temp_dir, temp_file, config_file
  unless File.directory? temp_dir
    Dir::mkdir temp_dir
  end

  unless File.file? temp_file
    f = File.open(temp_file, 'w')
    f.write("id: -1")
  end

  unless File.file? config_file
    f = File.open(config_file, 'w')
    f.write("")
  end 
end

def init
  set_up_environment TEMP_DIR, TEMP_FILE, CONFIG_FILE

  @config = YAMLFile.new(CONFIG_FILE)
  @info = YAMLFile.new(TEMP_FILE)

  unless ARGV[0] == "set"
    @user = User.new @config

    unless @user.valid?
      @user.errors.each do |error|
        Output.error(error)
      end
      exit 0
    end
  end

  @project = @user.get_projects.first
end

init

case ARGV[0]
when "info"
  # pivotal info next
  # pivotal info id
  # pivotal info current
  if ARGV[1] == 'next'
    Output.message("Displaying information for next story")
    Output.story_info(@project.stories.all(owner: "Chintan Parikh", state: "unstarted").first)
  elsif !ARGV[1].match(/^[\d]+(\.[\d]+){0,1}$/).nil?
    story = @project.stories.find(Integer[ARGV[1]])
    unless story.nil?
      Output.message("Displaying information for story #{ARGV[1]}")
      Output.story_info(story)
    else
      Output.error("No story with id #{ARGV[1]} exists")
    end
  elsif ARGV[1] == "current"
    if @user.started_story?
      story = @project.stories.find(@info.get('id'))
      Output.message("Displaying information for story #{story.id}")
      Output.story_info story
    else
      Output.error("No story has been started. Use pivotal start to start a story first")
    end
  end

when "start"
  # pivotal start next
  # pivotal start id
  if @user.started_story?
    unless Git.status.empty?
      Output.error("You are currently working on story #{@current_id} and have uncommitted changes on #{current_branch}. If you continue, your uncommitted changes will be lost. Continue? (Y/N)")
      continue = false
      while (!continue)
        option = $stdin.gets.chomp
        if option == 'N'
          exit 1
        elsif option != 'Y'
          puts "Please enter either Y or N"
        else
          continue = true;
        end
      end
    end
  end

  Git.discard_current_changes
  Git.checkout "develop"
  Git.pull

  story = nil
  if ARGV[1] == "next"
    story = @project.stories.all(owner: 'Chintan Parikh', state: 'unstarted').first
    Git.checkout Git.branch_name(story)
  elsif !ARGV[1].match(/^[\d]+(\.[\d]+){0,1}$/).nil?
    story = @project.stories.find(Integer(ARGV[1]))
    unless story.nil?
      Git.checkout Git.branch_name(story)
    else
      Output.error("No story with id #{ARGV[1]} exists")
    end
  end

  unless story.nil?
    @info.put 'id', story.id
    story.update(current_state: 'started')
    Output.message("Story #{story.id} has been started")
    Output.story_info story
  end

when "complete"
  if @user.started_story?
    story = @project.stories.find(@info.get('id'))
    Git.push Git.branch_name(story)
    story.update(current_state: 'finished')
    story.update(current_state: 'delivered')
    @info.put('id', -1)
    Output.message("Story #{story.id} has been completed")
  else
    Output.error("No story has been started. Use pivotal start to start a story first")
  end

when 'abandon'
  if @user.started_story?
    story = @project.stories.find(@info.get('id'))
    story.update(current_state: 'unstarted')
    Output.message("Story #{story.id} has been abandoned")
    @info.put("id", -1)
    Git.checkout "develop"
    Git.pull
  else
    Output.error("No story has been started. Use pivotal start to start a story first")
  end

when "list"
  stories = @project.stories.all(owner: 'Chintan Parikh', current_state: ['unstarted', 'started', 'finished', 'delivered'])
  stories.each do |story|
    Output.story_info(story)
  end

when "set"
  @config.set(ARGV[1], ARGV[2])
  Output.message("#{ARGV[1]} has been set to #{ARGV[2]}")
end






